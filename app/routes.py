from flask import render_template, flash, redirect, url_for, request
from app import app, db
from app.forms import LoginForm, RegistrationForm, EditProfileForm, PostForm
from app.models import User, Post
from flask_login import current_user, login_user, logout_user, login_required
from datetime import datetime

@app.route('/', methods=['GET', 'POST'])
@app.route('/index', methods=['GET', 'POST'])
@login_required
def index():
	form = PostForm()
	if form.validate_on_submit():
		post = Post(body=form.post.data, author=current_user)
		db.session.add(post)
		db.session.commit()
		flash('Your post is now live!')

		# It is a standard practice to respond to a POST request generated by a 
		# web form submission with a redirect. This helps mitigate an annoyance 
		# with how the refresh command is implemented in web browsers. All the 
		# web browser does when you hit the refresh key is to re-issue the last 
		# request. If a POST request with a form submission returns a regular 
		# response, then a refresh will re-submit the form. Because this is 
		# unexpected, the browser is going to ask the user to confirm the duplicate 
		# submission, but most users will not understand what the browser is asking 
		# them. But if a POST request is answered with a redirect, the browser is now 
		# nstructed to send a GET request to grab the page indicated in the redirect, 
		# so now the last request is not a POST request anymore, and the refresh 
		# command works in a more predictable way.
		return redirect(url_for('index'))
	page = request.args.get('page', 1, type=int)
	posts = current_user.followed_posts().paginate(
		page, app.config['POSTS_PER_PAGE'], False)
	# next_url and prev_url are two view functions returned by url_for() only if the
	# page exist in that direction
	next_url = url_for('index', page=posts.next_num) \
		if posts.has_next else None
	prev_url = url_for('index', page=posts.prev_num) \
		if posts.has_prev else None
	return render_template('index.html', title='Home Page', form=form,
		posts=posts.items, next_url=next_url, prev_url=prev_url)

@app.route('/login', methods=['GET', 'POST'])
def login():
	if current_user.is_authenticated:
		return redirect(url_for('index'))
	
	form = LoginForm()
	if form.validate_on_submit():
		user = User.query.filter_by(username=form.username.data).first()

		if user is None or not user.check_password(form.password.data):
			flash('Invalid username or password')
			return redirect(url_for('login'))

		login_user(user, remember=form.remember_me.data)
		return redirect(url_for('index'))

	return render_template('login.html', title='Sign In', form=form)

@app.route('/logout')
def logout():
	logout_user()
	return redirect(url_for('index'))

@app.route('/register', methods=['GET', 'POST'])
def register():
	if current_user.is_authenticated:
		return redirect(url_for('index'))
	form = RegistrationForm()
	if form.validate_on_submit():
		user = User(username=form.username.data, email=form.email.data)
		user.set_password(form.password.data)
		db.session.add(user)
		db.session.commit()
		flash('Congratulations, you are now a registered user!')
		return redirect(url_for('login'))
	return render_template('register.html', title='Register', form=form)

# Routing page for exploring all posts on the website using the same index.html
# template
@app.route('/explore')
@login_required
def explore():
	page = request.args.get('page', 1, type=int)
	posts = Post.query.order_by(Post.timestamp.desc()).paginate(
		page, app.config['POSTS_PER_PAGE'], False)
	return render_template('index.html', title='Explore', posts=posts.items)

@app.route('/user/<username>')
@login_required
def user(username):
	user = User.query.filter_by(username=username).first_or_404()

	page = request.args.get('page', 1, type=int)
	posts = user.posts.order_by(Post.timestamp.desc()).paginate(
		page, app.config['POSTS_PER_PAGE'], False)
	# next_url and prev_url are two view functions returned by url_for() only if the
	# page exist in that direction
	next_url = url_for('user', username=user.username, page=posts.next_num) \
		if posts.has_next else None
	prev_url = url_for('user', username=user.username, page=posts.prev_num) \
		if posts.has_prev else None
	return render_template('user.html', user=user, posts=posts.items,
		next_url=next_url, prev_url=prev_url)

# Routing page for editing the profile in an about_me field for each user. Users also
# have the ability to change their username in this page. This works in conjunction 
# with the edit_profile.html template and form
@app.route('/edit_profile', methods=['GET', 'POST'])
@login_required
def edit_profile():
	form = EditProfileForm(current_user.username)

	# validate_on_submit() returns true, copy the data from the form into the user
	# object and write the object to the database
	if form.validate_on_submit():
		current_user.username = form.username.data
		current_user.about_me = form.about_me.data
		db.session.commit()
		flash('Your changes have been saved.')
		return redirect(url_for('edit_profile'))

	# If the page/form is being requested with GET, this will populate the form with 
	# any pre-existing text in the fields found in the database
	elif request.method == 'GET':
		form.username.data = current_user.username
		form.about_me.data = current_user.about_me

	# If the above two criteria does not fit this implies browser sent a POST request
	# with form data but something in the data is invalid
	return render_template('edit_profile.html', title='Edit Profile', form=form)

# Route to the page for following a particular user
@app.route('/follow/<username>')
@login_required
def follow(username):
	user = User.query.filter_by(username=username).first()
	# If the user is not found, return to index
	if user is None:
		flash('User {} not found.'.format(username))
		return redirect(url_for('index'))
	# if the current user is the user, return an error
	if user==current_user:
		flash('You cannot follow yourself!')
		return redirect(url_for('user', username=username))
	current_user.follow(user)
	db.session.commit()
	flash('You are following {}.'.format(username))
	return redirect(url_for('user', username=username))

# Route to the page for unfollowing a particular user
@app.route('/unfollow/<username>')
@login_required
def unfollow(username):
	user = User.query.filter_by(username=username).first()
	# If the user is not found, return to index
	if user is None:
		flash('User {} not found.'.format(username))
		return redirect(url_for('index'))
	# if the current user is the user, return an error
	if user == current_user:
		flash('You cannot unfollow yourself!')
		return redirect(url_for('user', username=username))
	current_user.unfollow(user)
	db.session.commit()
	flash('You are not following {}.'.format(username))
	return redirect(url_for('user', username=username))

# Before Request decorator from Flask registers the decorated function to be exceuted
# right before the view function. This is useful for executing any code before the
# view function
@app.before_request
def before_request():
	# Update the last_seen time of a logged in user in the database
	if current_user.is_authenticated:
		current_user.last_seen = datetime.utcnow()
		db.session.commit()